{"version":3,"sources":["../../src/services/httpRequest.js"],"names":["httpRequest","request","require","Q","method","url","options","deferred","defer","jar","cookies","Object","keys","forEach","cookieKey","setCookie","cookie","reqOptions","json","data","body","headers","error","response","reject","cookieData","substring","indexOf","split","httpResp","statusCode","resolve","promise"],"mappings":";;;;;QAGgBA,W,GAAAA,W;AAHhB,IAAIC,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,IAAID,QAAQ,GAAR,CAAR;;AAEO,SAASF,WAAT,CAAsBI,MAAtB,EAA8BC,GAA9B,EAAmCC,OAAnC,EAA4C;;AAE/C;AACA,QAAIC,WAAWJ,EAAEK,KAAF,EAAf;;AAEA;AACA,QAAIC,MAAMR,QAAQQ,GAAR,EAAV;AACA,QAAIH,WAAWA,QAAQI,OAAvB,EAAgC;AAC5BC,eAAOC,IAAP,CAAYN,QAAQI,OAApB,EAA6BG,OAA7B,CAAqC,UAAUC,SAAV,EAAqB;AACtDL,gBAAIM,SAAJ,CAAcd,QAAQe,MAAR,CAAeF,YAAU,GAAV,GAAcR,QAAQI,OAAR,CAAgBI,SAAhB,CAA7B,CAAd,EAAwET,GAAxE;AACH,SAFD;AAGH;;AAED;AACA,QAAIY,aAAa,EAAjB;AACAA,eAAWR,GAAX,GAAiBA,GAAjB;AACAQ,eAAWZ,GAAX,GAAiBA,GAAjB;AACAY,eAAWb,MAAX,GAAoBA,MAApB;AACAa,eAAWC,IAAX,GAAkB,IAAlB;AACA,QAAIZ,WAAWA,QAAQa,IAAvB,EAA6BF,WAAWG,IAAX,GAAkBd,QAAQa,IAA1B;AAC7B,QAAIb,WAAWA,QAAQe,OAAvB,EAAgCJ,WAAWI,OAAX,GAAqBf,QAAQe,OAA7B;;AAEhC;AACA;AACApB,YAAQgB,UAAR,EAAoB,UAAUK,KAAV,EAAiBC,QAAjB,EAA2BH,IAA3B,EAAiC;AACjD,YAAIE,KAAJ,EAAW;AACPf,qBAASiB,MAAT,CAAgBF,KAAhB;AACA;AACH;AACD,YAAIZ,UAAU,EAAd;AACA,SAACa,SAASF,OAAT,CAAiB,YAAjB,KAAkC,EAAnC,EAAuCR,OAAvC,CAA+C,UAAUY,UAAV,EAAsB;AACjEA,yBAAaA,WAAWC,SAAX,CAAqB,CAArB,EAAwBD,WAAWE,OAAX,CAAmB,GAAnB,CAAxB,CAAb;AACAF,yBAAaA,WAAWG,KAAX,CAAiB,GAAjB,CAAb;AACAlB,oBAAQe,WAAW,CAAX,CAAR,IAAyBA,WAAW,CAAX,CAAzB;AACH,SAJD;AAKA,YAAII,WAAW;AACXC,wBAAYP,SAASO,UADV;AAEXT,qBAASE,SAASF,OAFP;AAGXD,kBAAMA,IAHK;AAIXV,qBAASA;AAJE,SAAf;AAMAH,iBAASwB,OAAT,CAAiBF,QAAjB;AACH,KAlBD;;AAoBA,WAAOtB,SAASyB,OAAhB;AACH","file":"httpRequest.js","sourcesContent":["var request = require('request');\nvar Q = require('q');\n\nexport function httpRequest (method, url, options) {\n\n    // Init\n    let deferred = Q.defer();\n\n    // Setup cookies\n    let jar = request.jar();\n    if (options && options.cookies) {\n        Object.keys(options.cookies).forEach(function (cookieKey) {\n            jar.setCookie(request.cookie(cookieKey+'='+options.cookies[cookieKey]), url);\n        });\n    }\n\n    // Setup request options\n    let reqOptions = {};\n    reqOptions.jar = jar;\n    reqOptions.url = url;\n    reqOptions.method = method;\n    reqOptions.json = true;\n    if (options && options.data) reqOptions.body = options.data;\n    if (options && options.headers) reqOptions.headers = options.headers;\n    \n    // Handler\n    // console.log(reqOptions.method + ' => ' + reqOptions.url);\n    request(reqOptions, function (error, response, body) {\n        if (error) {\n            deferred.reject(error);\n            return;\n        }\n        let cookies = {};\n        (response.headers['set-cookie'] || []).forEach(function (cookieData) {\n            cookieData = cookieData.substring(0, cookieData.indexOf(';'));\n            cookieData = cookieData.split('=');\n            cookies[cookieData[0]] = cookieData[1];\n        });\n        let httpResp = {\n            statusCode: response.statusCode,\n            headers: response.headers,\n            body: body,\n            cookies: cookies\n        }\n        deferred.resolve(httpResp);\n    });\n\n    return deferred.promise;\n}"]}